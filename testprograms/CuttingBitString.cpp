#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class CuttingBitString
{
    map< string, int > l_blocks;
    map< string, int> powers;
	public:
	 int getmin(string S)
	{
		 int l = S.length();
    string p = "1";
    for (int i=1;p.length()<S.length();i*=5)
    {
        p = DecToBin(i);
        l_blocks.insert(make_pair(p,1));
        powers.insert(make_pair(p,l));
    }
    return isCuttable(S);
	}

 string DecToBin(int number)
{
    if ( number == 0 ) return "0";
    if ( number == 1 ) return "1";

    if ( number % 2 == 0 )
        return DecToBin(number / 2) + "0";
    else
        return DecToBin(number / 2) + "1";
}

int isCuttable (string y) {
if(!(l_blocks.find(y)== l_blocks.end()))
    return l_blocks.find(y)->second;
     //isCuttable(s);

if ((y.length() == 1 && y[0]==0)||(y == "00")|| (y =="100") ||(y == "10")) {
    return -1;
}
else if(y == "") {
return 0;
}
else if(y == "11") {
    return 2;
}
int cut = -1;
for (map< string,int >::iterator iter = powers.begin(); iter!= powers.end() ;++iter){
    string subsr = iter->first;
    int ind = y.find(subsr);
    if (ind == -1) continue;
    string first = y.substr(0,ind);
    string end_string = y.substr(ind+subsr.length());
    //cout<<"string is cut into "<<first<<" "<<subsr<<" "<<end_string;
   // string end_string = y.substr(i);
    int last = isCuttable(end_string);
    int frt = isCuttable(first);
    if (last== -1 || frt == -1) {
        continue;
    }
    //cout<<"cut exists for "<<first<<" and "<<end_string<<endl;
    cut = 1 + frt + last;
    //if(l_blocks.find(y)== l_blocks.end())
      l_blocks.insert(make_pair(y,cut));
}
return cut;
}
};	

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	CuttingBitString *obj;
	int answer;
	obj = new CuttingBitString();
	clock_t startTime = clock();
	answer = obj->getmin(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "101101101";
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "1111101";
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "00000";
	p1 = -1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "110011011";
	p1 = 3;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "1000101011";
	p1 = -1;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "111011100110101100101110111";
	p1 = 5;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
